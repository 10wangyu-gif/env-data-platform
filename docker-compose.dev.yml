version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: env-mysql-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: dev_password
      MYSQL_DATABASE: env_data_platform
      MYSQL_USER: env_user
      MYSQL_PASSWORD: env_password
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_dev:/var/lib/mysql
      - ./config/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=200
      --slow-query-log=1
      --long-query-time=2
    networks:
      - env-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pdev_password"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: env-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - env-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # 主应用程序
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: env-data-platform-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # 应用配置
      ENV: development
      CONFIG_PATH: /app/config/config.dev.yaml

      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: env_data_platform
      DB_USERNAME: env_user
      DB_PASSWORD: env_password

      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""

      # 日志配置
      LOG_LEVEL: debug
      LOG_FORMAT: console

      # JWT配置
      JWT_SECRET: dev_jwt_secret_key_change_in_production
      JWT_EXPIRE: 24h
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - env-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: env-prometheus-dev
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_dev:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - env-network

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: env-grafana-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: dev_admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data_dev:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - env-network

volumes:
  mysql_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  prometheus_data_dev:
    driver: local
  grafana_data_dev:
    driver: local

networks:
  env-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16